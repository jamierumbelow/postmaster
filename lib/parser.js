// Generated by CoffeeScript 1.3.1

exports.Parser = (function() {
  var COMMANDS;

  Parser.name = 'Parser';

  function Parser() {}

  COMMANDS = ['HELO', 'EHLO', 'MAIL FROM', 'RCPT TO', 'DATA', 'RSET', 'NOOP', 'QUIT', 'HELP'];

  Parser.prototype.parseLine = function(string) {
    var args, command, meaning;
    command = '';
    COMMANDS.forEach(function(cmd) {
      if ((new RegExp("^" + cmd, 'm')).test(string)) {
        return command = cmd;
      }
    });
    if (command === '') {
      command = 'WTF';
    }
    if (this["parse" + (command.replace(' ', ''))] != null) {
      args = this["parse" + (command.replace(' ', ''))](string);
    }
    meaning = args.meaning;
    delete args['meaning'];
    return {
      command: command,
      args: args,
      meaning: meaning
    };
  };

  Parser.prototype.parseHELO = function(string) {
    return {
      domain: string.match(/^(HELO|EHLO) (.*)$/m)[2],
      meaning: 'hello'
    };
  };

  Parser.prototype.parseEHLO = function(string) {
    return this.parseHELO(string);
  };

  Parser.prototype.parseMAILFROM = function(string) {
    return {
      email: string.match(/^MAIL FROM:<(.*)>$/m)[1],
      meaning: 'from'
    };
  };

  Parser.prototype.parseRCPTTO = function(string) {
    return {
      email: string.match(/^RCPT TO:<(.*)>$/m)[1],
      meaning: 'to'
    };
  };

  Parser.prototype.parseDATA = function(string) {
    return {
      meaning: 'data-start'
    };
  };

  Parser.prototype.parseRSET = function(string) {
    return {
      meaning: 'reset'
    };
  };

  Parser.prototype.parseNOOP = function(string) {
    return {
      meaning: 'ping'
    };
  };

  Parser.prototype.parseQUIT = function(string) {
    return {
      meaning: 'quit'
    };
  };

  Parser.prototype.parseHELP = function(string) {
    return {
      meaning: 'info'
    };
  };

  Parser.prototype.parseWTF = function(string) {
    return {
      meaning: 'wtf'
    };
  };

  return Parser;

})();
