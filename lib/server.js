// Generated by CoffeeScript 1.3.1
var Parser, net, version;

net = require('net');

version = require('../package.json').version;

Parser = require('./parser').Parser;

exports.Server = (function() {
  var STATES;

  Server.name = 'Server';

  STATES = {
    "default": 1,
    data: 2,
    possibly_end_data: 3
  };

  function Server(next, host, port, quiet) {
    var _this = this;
    this.host = host != null ? host : 'localhost';
    this.port = port != null ? port : 5666;
    this.quiet = quiet != null ? quiet : false;
    this.parser = new Parser();
    this.state = STATES["default"];
    this.server = this.createServer();
    this.server.listen(this.port, this.host, function() {
      if (!_this.quiet) {
        console.log("Postmaster reporting for duty on " + _this.host + ":" + _this.port + " (HTTP - " + _this.host + ":" + (_this.port + 1) + ")");
      }
      if (next != null) {
        return next();
      }
    });
    this.server.on('connection', function(socket) {
      var buffer;
      socket.setEncoding('utf8');
      socket.on('connect', function() {
        return socket.write("220 " + _this.host + " Postmaster " + version + "\n");
      });
      buffer = '';
      return socket.on('data', function(data) {
        var lines;
        lines = (buffer + data).split("\n");
        buffer = lines.pop();
        return lines.forEach(function(line, index) {
          return _this.handler(socket, line);
        });
      });
    });
  }

  Server.prototype.handler = function(socket, data) {
    var email, token;
    email = this.newEmail();
    token = this.state === STATES["default"] ? this.parser.parseLine(data) : this.parser.dataCollection();
    if (token.meaning === 'data-collection' && this.state === STATES.data && data === "") {
      this.state = STATES.possibly_end_data;
    } else if (token.meaning === 'data-collection' && this.state === STATES.possibly_end_data && data === ".") {
      this.state = STATES["default"];
      socket.write("250 Successsfully saved message (#1)\n");
    } else {
      this.state = STATES.data;
    }
    if (token.meaning === 'hello') {
      return socket.write("250 Hello " + token.args.domain + ", nice to meet you\n");
    } else if (token.meaning === 'from') {
      email = this.newEmail();
      email.from = token.args.email;
      return socket.write("250 OK\n");
    } else if (token.meaning === 'to') {
      email.to.push(token.args.email);
      return socket.write("250 OK\n");
    } else if (token.meaning === 'data-start') {
      this.state = STATES.data;
      email.body = '';
      return socket.write("354 OK\n");
    } else if (token.meaning === 'data-collection') {
      return email.body += data;
    } else if (token.meaning === 'wtf') {
      return socket.write("502 Command Not Implemented\n");
    } else {
      return socket.write("500 Syntax Error\n");
    }
  };

  Server.prototype.newEmail = function() {
    return {
      from: '',
      to: [],
      body: ''
    };
  };

  Server.prototype.createServer = function() {
    return net.createServer();
  };

  Server.prototype.close = function() {
    return this.server.close();
  };

  return Server;

})();
